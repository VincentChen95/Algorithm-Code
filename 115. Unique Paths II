class Solution:
    """
    @param obstacleGrid: A list of lists of integers
    @return: An integer
    """
    def uniquePathsWithObstacles(self, obstacleGrid):
        # write your code here
        if obstacleGrid == None or len(obstacleGrid) == 0 or len(obstacleGrid[0]) == 0:
            return 0
            
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        
        if m == 1 and n == 1:
            return 1 
            
        path = [[0]*n]*m
        path[0][0] = 1 
        
        for i in range(m):
            for j in range(n):
                if i == 0 and j >= 1 :
                    if obstacleGrid[i][j] == 1:
                        path[i][j] = 0
                    else:
                        path[i][j] = path[i][j-1]
                elif j == 0 and i >= 1 :
                    if obstacleGrid[i][j] == 1:
                        path[i][j] = 0
                    else:
                        path[i][j] = path[i-1][j]
                else:
                    if obstacleGrid[i][j] == 1:
                        path[i][j] = 0
                    else:
                        path[i][j] = path[i-1][j] + path[i][j-1]
        return path[m-1][n-1]
                    
