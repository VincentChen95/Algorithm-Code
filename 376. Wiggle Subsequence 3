class Solution(object):
    def wiggleMaxLength(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if nums is None:
            return 0
        p = q = 1
        for i in range(1, len(nums)):
            if nums[i] > nums[i - 1]:
                p = q + 1
            # 如果连续两个值都同时小于前面这一个，q是不会变的
            elif nums[i] < nums[i - 1]:
                q = p + 1
        return min(len(nums) , max(p, q))
        # 要在O(n)的时间内完成，而Greedy算法正好可以达到这个要求，这里我们不在维护两个dp数组，
        # 而是维护两个变量p和q，然后遍历数组，如果当前数字比前一个数字大，则p=q+1，
        # 如果比前一个数字小，则q=p+1，最后取p和q中的较大值跟n比较，取较小的那个
