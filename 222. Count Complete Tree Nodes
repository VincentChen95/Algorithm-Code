# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def countNodes(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        if root is None:
            return 0
        count = 0
        left_hight = self.get_left_hight(root.left)
        right_hight = self.get_left_hight(root.right)
        # check the right side, the left side is full!
        if left_hight == right_hight:
            count = 2**left_hight + self.countNodes(root.right)
        else:
            # the right side is full, but less one layer
            count = 2**right_hight + self.countNodes(root.left)
        return count
            
    def get_left_hight(self,root):
        h = 0
        while root:
            h += 1
            root = root.left
        return h
        
        the first time need to check O(logN), the second time need to check O(logN-1), util O(1)
        the time complexity is O(logN*logN)
