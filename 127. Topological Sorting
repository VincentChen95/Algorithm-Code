/**
 * Definition for Directed graph.
 * class DirectedGraphNode {
 *     int label;
 *     ArrayList<DirectedGraphNode> neighbors;
 *     DirectedGraphNode(int x) { label = x; neighbors = new ArrayList<DirectedGraphNode>(); }
 * };
 */

public class Solution {
    /*
     * @param graph: A list of Directed graph node
     * @return: Any topological order for the given graph.
     */
    public ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph) {
        // write your code here
        ArrayList<DirectedGraphNode> result = new ArrayList<DirectedGraphNode>();
        HashMap<DirectedGraphNode,Integer> map = new HashMap();
        for (DirectedGraphNode node:graph){
            for(DirectedGraphNode neighbors:node.neighbors){
                if(map.containsKey(neighbors)){
                    map.put(neighbors,map.get(neighbors)+1);
                }else{
                    map.put(neighbors,1);
                }
            }
        }
        Queue<DirectedGraphNode> q = new LinkedList<DirectedGraphNode>();
        for (DirectedGraphNode node :graph){
            if(!map.containsKey(node)){
                q.offer(node);
                result.add(node);
            }
        }
        while(!q.isEmpty()){
            DirectedGraphNode node = q.poll();
            for(DirectedGraphNode n: node.neighbors){
                map.put(n,map.get(n) -1 );
                if(map.get(n)==0){
                    result.add(n);
                    q.offer(n);
                }
            }
        }
        return result;
    }
}
