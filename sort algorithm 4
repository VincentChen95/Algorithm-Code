
def insert_sort(nums):
    if nums is None or len(nums) <= 1:
        return nums
    for i in range(1, len(nums)):
        key = nums[i]
        j = i - 1
        while j >= 0 and nums[j] > key:
            nums[j + 1] = nums[j]
            j -= 1
        nums[j + 1] = key
    return nums


def selection_sort(nums):
    if nums is None or len(nums) <= 1:
        return nums
    for i in range(len(nums) - 1):
        key = nums[i]
        key_index = i
        for j in range(i + 1, len(nums)):
            if nums[j] < key:
                key = min(key, nums[j])
                key_index = j
        nums[i], nums[key_index] = nums[key_index], nums[i]
    return nums


def helper(nums, start, end):
    if start > end:
        return
    pivot = nums[start]
    i = start
    j = end
    while i < j:
        while nums[j] >= pivot and j > i:
            j -= 1
        while nums[i] <= pivot and i < j:
            i += 1
        nums[i], nums[j] = nums[j], nums[i]
    nums[start], nums[i] = nums[i], nums[start]
    helper(nums, start, i - 1)
    helper(nums, i + 1, end)


def quick_sort(nums):
    helper(nums, 0, len(nums) - 1)
    return nums


def merge_sort(nums):
    if len(nums) <= 1:
        return nums
    mid = len(nums) // 2
    left = merge_sort(nums[:mid])
    right = merge_sort(nums[mid:])
    i = j = k = 0
    while i < len(left) and j < len(right):
        if left[i] <= right[j]:
            nums[k] = left[i]
            i += 1
        else:
            nums[k] = right[j]
            j += 1
        k += 1
    if i < len(left):
        nums[k:] = left[i:]
    if j < len(right):
        nums[k:] = right[j:]
    return nums


def bubble(nums):
    for i in range(len(nums) - 1, 0, -1):
        for j in range(i):
            if nums[j] > nums[j + 1]:
                nums[j], nums[j + 1] = nums[j + 1], nums[j]
    return nums
    
