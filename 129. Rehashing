/**
 * Definition for ListNode
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    /**
     * @param hashTable: A list of The first node of linked list
     * @return: A list of The first node of linked list which have twice size
     */    
     
    private int newInd(int val,int capacity){
        return (val%capacity + capacity)%capacity;
    }
    public ListNode[] rehashing(ListNode[] hashTable) {
        // write your code here
        
        
        if(hashTable.length<=0){
            return hashTable;
        }
        int newCapacity = 2*hashTable.length;
        ListNode[] reshapeResult = new ListNode[newCapacity];
        
        for(int i =0;i<hashTable.length;i++){
            while(hashTable[i]!=null){
                int newInd = newInd(hashTable[i].val,newCapacity);
                if(reshapeResult[newInd]==null){
                    reshapeResult[newInd]=new ListNode(hashTable[i].val);
                }else{
                    ListNode dummy = reshapeResult[newInd];
                    while(dummy.next!=null){
                        dummy=dummy.next;
                    }
                    dummy.next= new ListNode(hashTable[i].val);
                }
                hashTable[i] = hashTable[i].next;
            }
            
        }
        return reshapeResult;
    }
}
