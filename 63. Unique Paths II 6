class Solution(object):
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        m = len(obstacleGrid[0])
        n = len(obstacleGrid)
        if obstacleGrid[0][0] == 1:
            return 0
        dp = [[0]*m for _ in range(n)]
        dp[0][0] = 1
        for i in range(n):
            for j in range(m):
                if obstacleGrid[i][j] == 1:
                    dp[i][j] = 0
                else:
                    if i > 0 and j == 0:
                        dp[i][j] = dp[i - 1][j]
                    elif i == 0 and j > 0:
                        dp[i][j] = dp[i][j - 1]
                    elif i > 0 and j > 0:
                        dp[i][j] = dp[i - 1][j] + dp[i][j - 1]
        return dp[-1][-1]
