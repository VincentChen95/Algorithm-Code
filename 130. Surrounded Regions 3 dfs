class Solution(object):
    def solve(self, board):
        """
        :type board: List[List[str]]
        :rtype: None Do not return anything, modify board in-place instead.
        """
        if board is None or len(board) == 0 or len(board[0]) == 0:
            return board
        row = len(board)
        col = len(board[0])
        for i in range(row):
            for j in range(col):
                if (i == 0 or j == 0 or i == (row - 1) or j == (col - 1)) and board[i][j] == 'O':
                    self.dfs(i, j, board)

        for i in range(row):
            for j in range(col):
                if board[i][j] == 'Z':
                    board[i][j] = 'O'
                elif board[i][j] == 'O':
                    board[i][j] = 'X'
        return board

    def dfs(self, x, y, board):
        if board[x][y] == 'O':
            board[x][y] = 'Z'
            for pair in [[-1, 0], [1, 0], [0, 1], [0, -1]]:
                i, j = pair
                if 0 < x + i < len(board) - 1 and 0 < y + j < len(board[0]) - 1:
                    self.dfs(x + i, y + j, board)
        
                        
                    
                    
