class Solution(object):
    def singleNumber(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        #做法是把32位的二进制数进行遍历，统计每个数字的每一位出现的和。因为每个数字出现了3次或者1次，所以如果某一位出现的次数不是3次，那么这个位置一定是因为那个只出现1次的数字导致的。用来保存结果的res是0，因此使用或操作，就能把这个位置的数字变成1.python的整型方便是方便了，但是由于其没有最大值，所以，当输入是一堆负数的时候，会导致认为结果是个整数！因为32位有符号的被认为成了无符号的，所以这就是Python的一个坑。注意一下结论，以后出现位运算的时候，需要对结果进行判断一下最好。如果不在这个范围内，说明了结果被认为是无符号的数了，需要减去2 ^ 32。因为负数第一个数表示符号，即最高位的一。
        # python里负数位运算是拿补码，补码第一个表示符号，补码转源码是，将补码减一再取反
        result = 0
        for i in range(32):
            count = 0
            mask = 1 << i
            for num in nums:
                # num当前位是1
                if num & mask:
                    count += 1
            # 如果有余数，一定是single number的
            if count % 3:
                result |= mask
        if result >= 2 ** 31:
            result -= 2 ** 32
        return result
        # https://blog.csdn.net/fuxuemingzhu/article/details/79554959
