class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid):
        """
        :type obstacleGrid: List[List[int]]
        :rtype: int
        """
        if not obstacleGrid and len(obstacleGrid) == 0 or len(obstacleGrid[0]) == 0:
            return 0
        m = len(obstacleGrid)
        n = len(obstacleGrid[0])
        
        path = [[0]*n]*m
        
        for i in range(m):
            for j in range(n):
                if obstacleGrid[i][j] == 1:
                    path[i][j] = 0
                elif i == 0 and j ==0:
                    path[i][i] = 1
                elif i == 0 and j != 0:
                    path[i][j] = path[i][j-1]
                elif i != 0 and j == 0:
                    path[i][j] = path[i-1][j]
                else:
                    path[i][j] = path[i-1][j] + path[i][j-1]
        return path[m-1][n-1]
