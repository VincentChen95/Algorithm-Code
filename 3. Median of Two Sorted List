class Solution:
    def findMedianSortedArrays(self, nums1, nums2):
        """
        :type nums1: List[int]
        :type nums2: List[int]
        :rtype: float
        """
        len1 = len(nums1)
        len2 = len(nums2)
        # Assume nums is smaller
        if len1 > len2:
            return self.findMedianSortedArrays(nums2,nums1)
        if len1 == 0:
            if len2 % 2 == 1:
                return nums2[int(len2/2)]
            else:
                return (nums2[int(len2/2)] + nums2[int(len2/2) - 1])/2
            
        sum_len = len1 + len2
        cut_L,cut_R = 0,len1
        cut_1 = int((cut_R-cut_L)/2) + cut_L
        min_value = - sys.maxsize
        max_value = sys.maxsize
        
        while cut_1 <= len1:
            cut_1 = int((cut_R-cut_L)/2) + cut_L
            cut_2 = int(sum_len/2) - cut_1
            if cut_1 == 0:
                L1 = min_value
            else:
                L1 = nums1[cut_1 - 1]
                
            if cut_1 == len1:
                R1 = max_value
            else:
                R1 = nums1[cut_1]
            
            if cut_2 == 0:
                L2 = min_value
            else:
                L2 = nums2[cut_2 - 1]
                
            if cut_2 == len2:
                R2 = max_value
            else:
                R2 = nums2[cut_2]
            
            if L1 > R2:
                cut_R = cut_1 - 1
            elif L2 > R1:
                cut_L = cut_1 + 1 
            else:
                if sum_len %2 == 0:
                    L1 = max(L1,L2)
                    R1 = min(R1,R2)
                    return (L1+R1)/2
                else:
                    return min(R1,R2)
        return -1
         
