# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reorderList(self, head):
        """
        :type head: ListNode
        :rtype: void Do not return anything, modify head in-place instead.
        """
        if not head:
            return
        slow = fast = head
        # Find the mid point
        while fast and fast.next:
            fast = fast.next.next
            slow = slow.next
        
        # Reverse the second half in-place
        pre = None
        node = slow
        while node:
            pre,node.next,node = node,pre,node.next
        # Merge in-place:
        first = head
        second = pre
        while second.next:
            first.next,first = second,first.next
            second.next,second = first,second.next
        return 

            
