class Solution(object):
    def maxArea(self, height):
        """
        :type height: List[int]
        :rtype: int
        """
        result = 0
        start = 0
        end = len(height) - 1
        while start < end:
            if height[start] <= height[end]:
                result = max(result,height[start]*(end-start))
                start += 1
            else:
                result = max(result,height[end]*(end-start))
                end -= 1
        return result
    # Time complexity: O(N)
    #The widest container (using first and last line) is a good candidate, because of its width. Its water level is the height of the smaller one of first and last line.
#All other containers are less wide and thus would need a higher water level in order to hold more water.
#The smaller one of first and last line doesn't support a higher water level and can thus be safely removed from further consideration.
