# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def rotateRight(self, head, k):
        """
        :type head: ListNode
        :type k: int
        :rtype: ListNode
        """
        if head is None or head.next is None:
            return head
        length = self.get_length(head)
        k %= length
        if k == 0:
            return head
        slow = fast = head
        while fast.next:
            fast = fast.next
            k -= 1
            if k < 0:
                slow = slow.next
        temp = slow.next
        slow.next = None
        fast.next = head
        return temp
        
    def get_length(self, head):
        count = 0
        cur = head
        while cur:
            count += 1
            cur = cur.next
        return count
