# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """
        if root is None:
            return None
        # p and q at the two side, or p or q is root
        if (root.val - p.val)*(root.val - q.val) <= 0:
            return root
        # p and q at the right side
        elif root.val < min(p.val, q.val):
            return self.lowestCommonAncestor(root.right, p, q)
        # p and q at the left side
        elif root.val > max(p.val, q.val):
            return self.lowestCommonAncestor(root.left, p, q)
            
            the time complexity is O(logN)
