"""
Definition for a point.
class Point:
    def __init__(self, a=0, b=0):
        self.x = a
        self.y = b
"""
from collections import deque

class Solution:
    """
    @param grid: a chessboard included 0 (false) and 1 (true)
    @param source: a point
    @param destination: a point
    @return: the shortest path 
    """
    def shortestPath(self, grid, source, destination):
        # write your code here
        if not grid or not grid[0] or not source or not destination:
            return -1
        step = self.bfs(grid,source,destination,step =0)
        return step
                
    def bfs(self,grid,source,destination,step):
        queue = deque([(source.x,source.y,step)])
        grid[source.x][source.y] = 1
        while queue :
            x,y,step = queue.popleft()
            if x == destination.x and y == destination.y:
                return step
            for delta_x,delta_y in [(1,2),(1,-2),(-1,2),(-1,-2),(2,1),(2,-1),(-2,1),(-2,-1)]:
                next_x,next_y = x+delta_x,y+delta_y
                if self.is_path(grid,next_x,next_y):
                    queue.append((next_x,next_y,step+1))
                    grid[next_x][next_y] = 1
        return -1

    def is_path(self,grid,x,y):
        n,m = len(grid),len(grid[0])
        return 0<=x<n and 0<=y<m and grid[x][y] == 0
