//Reverse Nodes in k-Group
//Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
//If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
//You may not alter the values in the nodes, only nodes itself may be changed.
//Only constant memory is allowed.
//Example
//Given this linked list: 1->2->3->4->5
//For k = 2, you should return: 2->1->4->3->5
//For k = 3, you should return: 3->2->1->4->5

public class Solution {
    /**
     * @param head: a ListNode
     * @param k: An integer
     * @return: a ListNode
     */
    public ListNode reverseKGroup(ListNode head, int k) {
        // write your code here
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        head = dummy;
        while(true){
            head = reverseK(head,k);
            if(head == null){
                break;
            }
        }
       return dummy.next;
    }
    public ListNode reverseK(ListNode head,int k){
        ListNode nk = head;
        for (int i =0; i<k; i++){
            if(nk == null){
                return null;
            }
            nk = nk.next;
        }
        if(nk == null){
            return null;
        }
        //reverse
        ListNode n1 = head.next;
        ListNode nkPlus = nk.next;
        ListNode prev = null;
        ListNode curt = n1;
        while(curt != nkPlus){
            ListNode temp = curt.next;
            curt.next = prev;
            prev = curt;
            curt = temp;
        }
        head.next = nk;
        n1.next = nkPlus;
        return n1;
    }
}
