# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def recoverTree(self, root):
        """
        :type root: TreeNode
        :rtype: None Do not return anything, modify root in-place instead.
        """
        prev = None
        stack = []
        small_node = bigger_node = None
        while root or stack:
            while root:
                stack.append(root)
                root = root.left
            node = stack.pop()
            if prev is not None and prev.val > node.val:
                # just in case the situation [3, 2, 1].
                # if we don't take the first round, the bigger node will be 2, instead of 3
                if small_node is None:
                    bigger_node = prev
                small_node = node
            prev = node
            if node.right:
                root = node.right
        temp = bigger_node.val
        bigger_node.val = small_node.val
        small_node.val = temp
        
        
        
        the time complexity is O(N), but the space become o(1)
