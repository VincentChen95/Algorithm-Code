/**
 * Definition for undirected graph.
 * class UndirectedGraphNode {
 *     int label;
 *     ArrayList<UndirectedGraphNode> neighbors;
 *     UndirectedGraphNode(int x) { label = x; neighbors = new ArrayList<UndirectedGraphNode>(); }
 * };
 */


public class Solution {
    /*
     * @param node: A undirected graph node
     * @return: A undirected graph node
     */
    public UndirectedGraphNode cloneGraph(UndirectedGraphNode node) {
        // write your code here
        if(node == null){
            return null;
        }
        // Use BFS to traverse the whole graph
        ArrayList<UndirectedGraphNode> nodes = getNodes(node); 
        
        // Copy nodes
        HashMap<UndirectedGraphNode,UndirectedGraphNode> map = new HashMap<>();
        for(UndirectedGraphNode n:nodes){
            map.put(n,new UndirectedGraphNode(n.label));
        }
        
        // Copy edges
        for(UndirectedGraphNode n:nodes){
            UndirectedGraphNode newNode = map.get(n);
            for(UndirectedGraphNode neighbor:n.neighbors){
                UndirectedGraphNode newNeighbor = map.get(neighbor);
                newNode.neighbors.add(newNeighbor);
            }
        }
        return map.get(node);
    }
    
    
    private ArrayList<UndirectedGraphNode> getNodes(UndirectedGraphNode node){
        Queue<UndirectedGraphNode> queue = new LinkedList<>();
        queue.offer(node);
        
        HashSet<UndirectedGraphNode> set = new HashSet<>();
        set.add(node);
        
        while(!queue.isEmpty()){
            UndirectedGraphNode head = queue.poll();
            for(UndirectedGraphNode neighbor:head.neighbors){
                if(!set.contains(neighbor)){
                    queue.offer(neighbor);
                    set.add(neighbor);
                }
            }
        }
        return new ArrayList<UndirectedGraphNode>(set);
    }
}
