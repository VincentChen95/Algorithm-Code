class Solution:
    """
    @param board: A list of lists of character
    @param word: A string
    @return: A boolean
    """
    def exist(self, board, word):
        # write your code here
        if board == None or len(board) ==0 or len(board[0])==0:
            return False
        if word == None:
            return True
            
        m, n = len(board), len(board[0])
        
        for x in range(m):
            for y in range(n):
                # All possible start points
                if board[x][y] == word[0]:
                    if self.dfs(board,word,x,y,0):
                        return True
        return False
    
    def dfs(self,board,word,x,y,index):
        if index == len(word):
            return True
        
        if not self.is_bound(x,y,board) or board[x][y] != word[index]:
            return False
        board[x][y] = '#'
        is_finded = self.dfs(board,word,x-1,y,index+1) or self.dfs(board,word,x+1,y,index+1) or self.dfs(board,word,x,y-1,index+1) or self.dfs(board,word,x,y+1,index+1)
        # Recover!
        board[x][y] = word[index]
        return is_finded
    
    def is_bound(self,x,y,board):
        m, n = len(board), len(board[0])
        return 0 <= x < m and 0 <= y < n
