class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if len(prices) == 0:
            return 0
        buy = [0]*len(prices)
        sell = [0]*len(prices)
        buy[0] = -prices[0]
        for i in range(1, len(prices)):
            sell[i] = max(sell[i-1], prices[i] + buy[i-1])
            buy[i] = max(buy[i-1], sell[i-2] - prices[i]) if i >= 2 else max(buy[i-1], - prices[i])
        return sell[-1]
    
    # https://soulmachine.gitbooks.io/algorithm-essentials/java/dp/best-time-to-buy-and-sell-stock-with-cooldown.html
    # 最主要的问题就是怎么写这个状态方程
    # 以及在此处buy是用的负数，最大意味着付出最少
