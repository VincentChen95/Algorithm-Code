class Solution(object):
    def __init__(self):
        self.result = []
        
    def maxRotateFunction(self, A):
        """
        :type A: List[int]
        :rtype: int
        """
        #Fina the pattern
        #=>f(i+1) - f(i) =     A[0]   +   A[1]   +   A[2] + ...  +       A[k-1]    - k * A[k] 
        #= (A[0]   +   A[1]   +   A[2] + ...  +       A[k-1] + k * A[k]) - (k+1) * A[k]
        #= sum(Array) - A[k] * array.length
        #=> f(i+1) = f(i) + sum(Array) -  last element * array.length
        result = cur = sum(i*j for i,j in enumerate(A))
        sum_A = sum(A)
        n = len(A)
        while A:
            cur += sum_A - A.pop()*n
            result = max(result,cur)
        return result
