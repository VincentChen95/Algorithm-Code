# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root is None:
            return True
        left_height = self.get_height(root.left)
        right_height = self.get_height(root.right)
        if abs(right_height - left_height) > 1:
            return False
        return self.isBalanced(root.left) and self.isBalanced(root.right)
        
        
    def get_height(self,root):
        if root is None:
            return 0
        left = self.get_height(root.left)
        right = self.get_height(root.right)
        return max(left,right) + 1
        
        T(O): O(N*logN)
        
        # Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def isBalanced(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        self.flag = True
        self.getHeight(root)
        return self.flag
        
    def getHeight(self, node):
        if node is None:
            return 0
        left = self.getHeight(node.left)
        right = self.getHeight(node.right)
        if abs(left - right) > 1:
            self.flag = False
        return max(left,right) + 1
        
        O(N)
