class Solution(object):
    def wallsAndGates(self, rooms):
        """
        :type rooms: List[List[int]]
        :rtype: None Do not return anything, modify rooms in-place instead.
        """
        if not rooms:
            return 
        r, c= len(rooms), len(rooms[0])
        for i in xrange(r):
            for j in xrange(c):
                if rooms[i][j] == 0:
                    # 对每一张们要跑一次BFS
                    queue = collections.deque([])
                    self.queue_append(queue, i, j, 1)
                    # 要用一个visited来记录
                    visited = set()
                    while queue:
                        x, y, val = queue.popleft()
                        if x < 0 or x >= r or y < 0 or y >= c or rooms[x][y] in [0, -1] or (x, y) in visited:
                            continue
                        visited.add((x, y))
                        rooms[x][y] = min(rooms[x][y], val)
                        self.queue_append(queue, x, y, val + 1)
                    
    def queue_append(self, queue, i, j, val):
        queue.append((i+1, j, val))
        queue.append((i-1, j, val))
        queue.append((i, j+1, val))
        queue.append((i, j-1, val))
