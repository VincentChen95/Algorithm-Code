class Solution(object):
    def isAdditiveNumber(self, num):
        """
        :type num: str
        :rtype: bool
        """
        if num is None or len(num) == 0:
            return True
        for i in range(1, len(num)):
            left_str = num[:i]
            if len(left_str) > 1 and left_str[0] == '0':
                continue
            for j in range(i + 1, len(num)):
                right_str = num[i:j]
                if len(right_str) > 1 and right_str[0] == '0':
                    continue
                if self.helper(num[j:], left_str, right_str):
                    return True
        return False

    def helper(self, num, left_str, right_str):
        if (len(left_str) > 1 and left_str[0] == '0') or (len(right_str) > 1 and right_str[0] == '0'):
            return False
        str_ = str(int(left_str) + int(right_str))
        if len(str_) > len(num):
            return False
        if str_ == num:
            return True
        if num.startswith(str_):
            return self.helper(num[len(str_):], right_str, str_)
            
            
        Time complexity is O(N^3)
        
