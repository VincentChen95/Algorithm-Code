# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def buildTree(self, inorder, postorder):
        """
        :type inorder: List[int]
        :type postorder: List[int]
        :rtype: TreeNode
        """
        if len(postorder) == 0:
            return None
        if len(postorder) == 1:
            return TreeNode(postorder[0])
        root = TreeNode(postorder[-1])
        root_index = inorder.index(root.val)
        # how many nodes on the left? it equal to the root_index
        root.left = self.buildTree(inorder[ : root_index], postorder[ : root_index])
        root.right = self.buildTree(inorder[root_index + 1 : ], postorder[root_index : -1])
        return root
        
        time complexity: T(N) = 2T(N/2), according to the master theorem, the time complexity is O(NlogN)
