public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the root of the minimum subtree
     */
     
    private int minimumSum = Integer.MAX_VALUE;
    private TreeNode subtree = null;
    
    public TreeNode findSubtree(TreeNode root) {
        // write your code here
        helper(root);
        return subtree;
    }
    
    private int helper(TreeNode root){
        if(root == null){
            return 0;
        }
        int sum = root.val + helper(root.left) + helper(root.right);
        if(sum <= minimumSum){
            minimumSum = sum;
            subtree = root;
        }
        return sum;
    }
}


class resultType{
    public TreeNode minSubtree;
    public int sum,minSum;
    public resultType(TreeNode minSubtree,int minSum,int sum){
        this.minSubtree = minSubtree;
        this.minSum = minSum;
        this.sum = sum;
    }
}

public class Solution {
    /**
     * @param root: the root of binary tree
     * @return: the root of the minimum subtree
     */
     
    public TreeNode findSubtree(TreeNode root) {
        // write your code here
        resultType result = helper(root);
        return result.minSubtree;
    }
    
    private resultType helper(TreeNode node){
        if (node ==null){
            return new resultType(null,Integer.MAX_VALUE,0);
        }
        resultType leftResult = helper(node.left);
        resultType rightResult = helper(node.right);
        resultType result = new resultType(node,leftResult.sum+rightResult.sum+node.val,leftResult.sum+rightResult.sum+node.val);
        if(leftResult.minSum<=result.minSum){
            result.minSum = leftResult.minSum;
            result.minSubtree = leftResult.minSubtree;
        }
        if(rightResult.minSum<=result.minSum){
            result.minSum = rightResult.minSum;
            result.minSubtree = rightResult.minSubtree;
        }
        return result;
    }
}
