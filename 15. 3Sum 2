class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """     
        if not nums or len(nums) <= 2: return []
        result = []                
        for i in range(len(nums)-2):
            new_target =  - nums[i]
            dic = {}
            for idx,num in enumerate(nums[i+1:]):
                if num not in dic:
                    dic[new_target-num] = num
                else:
                #Check duplicate
                    if sorted([nums[i],dic[num],num]) not in result:
                        result.append(sorted([nums[i],dic[num],num]))
        return result
        
        
        class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """     
        if not nums or len(nums) <= 2: return []
        result = []          
        nums.sort() 
        for i in range(len(nums)-2):
            if i > 0 and nums[i] == nums[i-1]:
                continue
            new_target =  - nums[i]
            start = i + 1
            end = len(nums) - 1
            while start < end:
                if nums[start] + nums[end] > new_target:
                    end -= 1
                elif nums[start] + nums[end] < new_target:
                    start += 1
                else:
                    result.append([nums[i],nums[start],nums[end]])
                    while start < end and nums[start] == nums[start+1]:
                        start += 1
                    while start < end and nums[end] == nums[end-1]:
                        end -= 1
                    start += 1
                    end -= 1
        return result

#第二中解法更优，无须格外空间，去重方便，时间复杂度O（N^2）
