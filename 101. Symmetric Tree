# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

import collections
class Solution:
    def isSymmetric(self, root):
        """
        :type root: TreeNode
        :rtype: bool
        """
        if root == None:
            return True
        queue = collections.deque()
        queue.append(root.left)
        queue.append(root.right)
        
        while queue:
            c = len(queue)
            i = 0
            for i in range(c):
                if (queue[i] == None and queue[c-1-i] != None) or (queue[i] != None and queue[c-1-i] == None):
                    return False
                if queue[i] == None and queue[c-1-i] == None:
                    continue
                if queue[i].val != queue[c-1-i].val:
                    return False
            for i in range(c):
                node = queue.popleft()
                if node:
                    queue.append(node.left)
                    queue.append(node.right)
        return True
        
