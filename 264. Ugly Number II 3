class Solution(object):
    def nthUglyNumber(self, n):
        """
        :type n: int
        :rtype: int
        """
        ugly_sequence = [1]
        index_2 = index_3 = index_5 = 0
        while n > 1:
            ugly_2 = ugly_sequence[index_2]*2
            ugly_3 = ugly_sequence[index_3]*3
            ugly_5 = ugly_sequence[index_5]*5
            min_value = min(ugly_2, ugly_3, ugly_5)
            ugly_sequence.append(min_value)
            if min_value == ugly_2:
                index_2 += 1
            if min_value == ugly_3:
                index_3 += 1
            if min_value == ugly_5:
                index_5 += 1
            n -= 1
        return ugly_sequence[-1]
            
            
            
        #假设我们现在已经有了一个丑数的有序数组，如果要找到下一个丑数，则可以将数组中的每一个数乘以2，并将其中第一个大于当前丑数的的结果记为M2，
        同样将当前有序数组每一个数都乘以3，第一个大于当前丑数的的结果记为M3，同样方式得到乘以5的第一个大于当前丑数的结果记为M5。
        可以下一个丑数必然是min(M2, M3, M5)。事实上我们并不必要将数组中的每个数都乘以2,3,5。对于乘以2来说，
        我们只要找到第一个乘以2大于当前丑数的数在数组中的位置，同样找到第一个乘以3,5大于当前丑数的数的位置。如果当前丑数记为M，
        然后就可以使用min(M*2, M*3, M*5)来产生下一个丑数。
        
            
            
