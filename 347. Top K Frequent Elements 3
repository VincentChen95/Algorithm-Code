from collections import Counter
import heapq
class Solution(object):
    def topKFrequent(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: List[int]
        """
        if k == len(nums):
            return nums      
        heap = []
        number = [(freq, num) for num, freq in Counter(nums).items()]
        for i in range(k):
            # we only need to maintain a heapq, so the time complexity is O(NlogK)
            heapq.heappush(heap,number[i])
        for i in range(k,len(number)):
            if number[i][0] > heap[0][0]:
                heapq.heappop(heap)
                heapq.heappush(heap,number[i])
        return [heapq.heappop(heap)[1] for _ in range(k)][::-1]
        
