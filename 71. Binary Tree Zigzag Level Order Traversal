/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */

public class Solution {
    /**
     * @param root: A Tree
     * @return: A list of lists of integer include the zigzag level order traversal of its nodes' values.
     */
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        // write your code here
        List<List<Integer>> result = new LinkedList<List<Integer>>();
        if(root==null){
            return result;
        }
        
        Stack<TreeNode> curLevel = new Stack<TreeNode>();
        Stack<TreeNode> nextLevel = new Stack<TreeNode>();
        Stack<TreeNode> temp;
        
        curLevel.push(root);
        boolean odd = true;
        
        while(!curLevel.isEmpty()){
            List<Integer> level = new LinkedList<Integer>();
            while(!curLevel.isEmpty()){
                TreeNode node = curLevel.pop();
                level.add(node.val);
                if(odd){
                    if(node.left!=null){
                        nextLevel.push(node.left);
                    }
                    if(node.right!=null){
                        nextLevel.push(node.right);
                    }
                }else{
                    if(node.right!=null){
                        nextLevel.push(node.right);
                    }
                    if(node.left!=null){
                        nextLevel.push(node.left);
                    }
                }
                
            }
            
            result.add(level);
            odd = !odd;
            temp = curLevel;
            curLevel = nextLevel;
            nextLevel = temp;
        }
        return result;
    }
}
