class Solution(object):
    def threeSum(self, nums):
        """
        :type nums: List[int]
        :rtype: List[List[int]]
        """
        if len(nums) < 3:
            return []
        nums.sort()
        result = []
        for i in range(len(nums) - 2):
            if i == 0 or (nums[i] != nums[i - 1]):
                self.helper(result, nums, i)
        return result
    
    def helper(self, result, nums, idx):
        start = idx + 1
        end = len(nums) - 1
        target = nums[idx]
        while start < end:
            if nums[start] + nums[end] + target == 0:
                result.append([nums[start], nums[end], target])
                while start < end and nums[start] == nums[start + 1]:
                    start += 1
                while start < end and nums[end] == nums[end - 1]:
                    end -= 1
                start += 1
                end -= 1
            elif nums[start] + nums[end] + target > 0:
                end -= 1
            else:
                start += 1
                
                
          time complexity is O(N^2)
