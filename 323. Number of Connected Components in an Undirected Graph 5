class Solution:
    def countComponents(self, n: int, edges: List[List[int]]) -> int:
        graph = collections.defaultdict(list)
        for x, y in edges:
            graph[x].append(y)
            graph[y].append(x)
        visited = set()
        count = 0
        for node in range(n):
            if node not in visited:
                count += 1
                self.dfs(node, visited, graph)
        return count
        
        
    def dfs(self, node, visited, graph):
        visited.add(node)
        for neighbor in graph[node]:
            if neighbor not in visited:
                self.dfs(neighbor, visited, graph)
