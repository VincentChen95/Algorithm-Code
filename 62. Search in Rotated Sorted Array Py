class Solution:
    """
    @param A: an integer rotated sorted array
    @param target: an integer to be searched
    @return: an integer
    """
    def search(self, A, target):
        # write your code here
        if A == None or len(A) == 0:
            return -1
        ele = A[0]
        n = len(A)
        start = 0
        end = n -1 
        if A[start] < A[end]:
            return self.binary_Ser(A,start,end,target)
        
        # Find the break point
        while start + 1 < end:
            mid = start + int((end - start)/2)
            if A[mid] < ele:
                end = mid
            else:
                start = mid
                ele = A[start]
        if target <= A[start] and target >= A[0]:
            return self.binary_Ser(A,0,start,target)
        else:
            return self.binary_Ser(A,start+1,n-1,target)
        return -1
        
    def binary_Ser(self,A,sta,ed,target):
        start = sta
        end = ed
        while start + 1 < end:
            mid = start + int((end - start)/2)
            if A[mid] > target:
                end = mid
            else:
                start = mid
        if A[start] == target:
            return start
        if A[end] == target:
            return end
        return -1 
